/*
 * Copyright 2006 Luca Garulli (luca.garulli--at--assetdata.it)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.romaframework.core.flow;

import org.romaframework.aspect.session.SessionInfo;
import org.romaframework.core.schema.SchemaClassElement;
import org.romaframework.core.schema.SchemaField;

/**
 * Listener interface of events. Aspects and modules can implement this interface to intercept events generated by Roma controller.
 * 
 * @author Luca Garulli (luca.garulli--at--assetdata.it)
 */
public interface UserObjectEventListener {
	class IgnoredExecution {
	}

	/*
	 * Special object to return when the callback ignore the operation.
	 */
	public static final IgnoredExecution	IGNORED	= new IgnoredExecution();

	/**
	 * Get the priority of the listener, if the priority of a listener is higher than another it will executed after the other.
	 * 
	 * @return the priority value
	 */
	public int getPriority();

	/**
	 * Callback invoked before the execution of any action by the Controller. Events are themselve Actions.
	 * 
	 * @param iContent
	 *          The User Object
	 * @param iAction
	 *          The Schema Action instance
	 * @return true if the execution can proceed, false otherwise
	 */
	public boolean onBeforeActionExecution(Object iContent, SchemaClassElement iAction);

	/**
	 * Callback invoked after the execution of any action by the Controller. Events are themselve Actions.
	 * 
	 * @param iContent
	 *          The User Object
	 * @param iAction
	 *          The Schema Action instance
	 * @param returnedValue
	 *          the return value of the method invocation
	 */
	public void onAfterActionExecution(Object iContent, SchemaClassElement iAction, Object returnedValue);

	/**
	 * Callback invoked before to read a field. Return IGNORED if the callback ignores the method itself.
	 * 
	 * @param iContent
	 *          Object owns the field to be read
	 * @param iField
	 *          Field to be read
	 * @param iCurrentValue
	 *          Current field value
	 * @return If the implementation change the value, returns the modified value, otherwise IGNORED
	 */
	public Object onBeforeFieldRead(Object iContent, SchemaField iField, Object iCurrentValue);

	/**
	 * Callback invoked after have read a field.
	 * 
	 * @param iContent
	 *          Object owns the field to be read
	 * @param iField
	 *          Field to be read
	 * @param iCurrentValue
	 *          Current field value
	 * @return If the implementation change the value, returns the modified value, otherwise the same of iCurrentValue parameter
	 */
	public Object onAfterFieldRead(Object iContent, SchemaField iField, Object iCurrentValue);

	/**
	 * Callback invoked before a field is written.
	 * 
	 * @param iContent
	 *          Object owns the field to be written
	 * @param iField
	 *          Field to be written
	 * @param iCurrentValue
	 *          Value to write in the field
	 * @return If the implementation change the value, returns the modified value, otherwise the same of iCurrentValue parameter
	 */
	public Object onBeforeFieldWrite(Object iContent, SchemaField iField, Object iCurrentValue);

	/**
	 * Callback invoked after a field is written.
	 * 
	 * @param iContent
	 *          Object owns the field to be written
	 * @param iField
	 *          Field to be written
	 * @param iCurrentValue
	 *          Value to write in the field
	 * @return If the implementation change the value, returns the modified value, otherwise the same of iCurrentValue parameter
	 */
	public Object onAfterFieldWrite(Object iContent, SchemaField iField, Object iCurrentValue);

	/**
	 * Invoked when a field is changed outside Roma, usually from the user side.
	 * 
	 * @param iSession
	 *          User's session
	 * @param iContent
	 *          POJO refreshed
	 * @param iField
	 *          Field refreshed
	 */
	public void onFieldRefresh(SessionInfo iSession, Object iContent, SchemaField iField);

	/**
	 * Invoked when an exception is throwed by an action or a a field change
	 * 
	 * @param iContent
	 * @param iElement
	 * @param iThrowed
	 * @return
	 */
	public Object onException(Object iContent, SchemaClassElement iElement, Throwable iThrowed);
}
